<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--XML的根元素，属性namespace定义了当前XML的命名空间-->
<mapper namespace="tk.mybatis.simple.mapper.RoleMapper">

	<!-- 带日志的缓存 -->
	<cache type="org.mybatis.caches.ehcache.LoggingEhcache"/>

	<!-- Redis缓存-->
	<cache type="org.mybatis.caches.redis.RedisCache"/>

	<!--
		** 二级缓存 **

	默认的二级缓存会有如下效果：
	1. 映射语句文件中的所有SELECT语句将被缓存；
	2. 映射语句文件中的所有INSERT、UPDATE、DELETE语句会刷新缓存；
	3. 缓存会使用Least Recently Used（LRU，最近最少使用的）算法来收回；
	4. 根据时间表（如no Flush Interval，没有刷新间隔），缓存不以任何时间顺序来刷新；
	5. 缓存会存储集合或对象（无论查询方法返回什么类型的值）的1024个引用；
	6. 缓存会被视为read/write（可读/可写）的，意味着对象检索不是共享的，而且可以安全地被调用者修改，
	   而不干扰其他调用者或线程所做的潜在修改；
	-->

	<!-- 创建一个FIFO缓存，并每隔60秒刷新一次，存储集合或对象的512个引用，返回的对象被认为是只读的，
	     因此在不同线程中调用者之间修改它们会导致冲突。-->
	<cache eviction="FIFO"
		   flushInterval="60000"
		   size="512"
		   readOnly="false"/>
	<!--
	    ** cache可以配置的属性如下： **
	1. eviction（收回策略）：
	   LRU（最近最少使用）：移除最长时间不被使用的对象，默认。
	   FIFO（先进先出）：按对象进入缓存的顺序来移除它们。
	   SOFT（软引用）：移除基于垃圾回收器状态和软引用规则的对象。
	   WEAK（弱引用）：更积极地移除基于垃圾收集器状态和弱引用规则的对象。
	2. flushInterval（刷新间隔）：可以被设置为任意的正整数，代表刷新间隔毫秒数，默认不设置，即没有刷新间隔，
	   缓存仅在调用语句时刷新。
	3. size（引用数目）：可以被设置为任意正整数，要记住缓存的对象数目和运行环境的可以内存资源数目，默认1024。
	4. readOnly（只读）：true/false，只读的缓存会给所有调用者返回缓存对象的相同实例，因此这些对象不能被修改，
	   默认false。
	-->

	<resultMap id="roleMap" type="tk.mybatis.simple.model.SysRole">
		<id property="id" column="id"/>
		<result property="roleName" column="role_name"/>
		<result property="enabled" column="enabled"/>
		<result property="createBy" column="create_by"/>
		<result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
	</resultMap>

	<update id="updateById">
		update sys_role
		<set>
			<if test="roleName != '' and roleName != null">
		  		role_name = #{roleName},
		    </if>
			<if test="enabled != null">
				enabled = #{enabled},
			</if>
			<if test="createBy != null">
				create_by = #{createBy},
			</if>
			<if test="createTime != null">
				create_time = #{createTime, jdbcType=TIMESTAMP},
			</if>
			id = #{id}
		</set>
		where id = #{id}
	</update>

</mapper>