<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
		PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
		"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--XML的根元素，属性namespace定义了当前XML的命名空间-->
<mapper namespace="tk.mybatis.simple.mapper.UserMapper">

	<!--
		XML中的select标签的id属性值和定义的接口方法名是一样的。
	MyBatis就是通过这种方式将接口方法和XML中定义的SQL语句关联到一起的。
	-->
	<resultMap id="userMap" type="SysUser">
		<!--<constructor>
			<idArg column="id" javaType="long"/>
			<arg column="user_password" javaType="string"/>
			<arg column="user_email" javaType="string"/>
			<arg column="user_info" javaType="string"/>
			<arg column="head_img" javaType="byte[]"/>
			<arg column="create_time" javaType="date"/>
		</constructor>-->
		<!-- 两种任选一，前者通过构造函数，后者通过setter方法 -->
		<id property="id" column="id"/>
		<result property="userName" column="user_name"/>
		<result property="userPassword" column="user_password"/>
		<result property="userEmail" column="user_email"/>
		<result property="userInfo" column="user_info"/>
		<result property="headImg" column="head_img" jdbcType="BLOB"/>
		<result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
	</resultMap>

	<!--
		resultMap是一种很重要的配置结果映射的方法，我们必须熟练掌握resultMap的配置方法。

		** 属性 **

		id：必填，唯一标识。
		type：必填，用于配置查询列所映射到的Java对象类型
		extends：选填，可以配置当前的resultMap继承自其他的resultMap，属性值为继承resultMap的id
		autoMapping：选填，true/false，用于配置是否启用非映射字段 （没有在resultMap中配置的字段）的自动映射功能，
		             该配置可以覆盖全局的autoMappingBehavior配置。

		** 标签 **

		constructor:配置使用构造方法注入结果，包含两个子标签
			idArgs：id参数，标记结果作为id，可以帮助提高整体性能
			arg：注入到构造方法的一个普通结果
		id：一个id结果，标记结果作为id，可以帮助提高整体性能
		result：注入到Java对象属性的普通结果
		association：一个复杂的类型关联，许多结果将包成这种类型
		collection：复杂类型的集合
		discrimination：根据结果值来决定使用哪个结果映射
		case：基于某些值的结果映射

	-->

	<!--
		** constructor与id/result标签的关系 **

		constructor：通过构造方法注入属性的结果值。构造方法中的idArg、arg分别对应着resultMap中的id和result标签，
		             它们含义相同，只是注入方式不同。
		id/result：包含的属性相同，不同之处在于，id代表的是主键的字段，它们的属性通过setter方法注入。
	-->

	<!--
		** id/result标签包含的属性 **

		column：从数据库中得到的列名，或者是列的别名；
		property：映射到列结果的属性。可以是简单列表，也可以是“address.street.number”这样的嵌套属性；
		javaType：一个Java类的完全限定名，或一个类型别名（通过typeAlias配置或者默认的类型）。如果映射
		          一个JavaBean，MyBatis通常可以自动判断属性的类型。如果映射到HashMap，则需要明确地指
		          定javaType的值。
		jdbcType：列对应的数据库类型。JDBC类型仅仅需要对插入、更新、删除操作可能为空的列进行处理。这是
		          JDBC jdbcType的需要，而不是MyBatis的需要。
		typeHandler：使用这个属性可以覆盖默认的类型处理器。这个属性值是类的完全限定名或类型别名。
	-->

	<select id="selectById" parameterType="java.lang.Long" resultMap="userMap">
		select * from sys_user where id = #{id}
	</select>

	<!--
		使用自动映射的前提是列名与属性名保持一致，但MyBatis提供了一个全局属性mapUnderscoreToCamelCase，
	 可以自动将以下划线方式命名的数据库列映射到Java对象的驼峰式命名属性中。所以这里不必再取别名。
	 -->
	<select id="selectAll" resultType="SysUser">
		select id,
		       user_name,
		       user_password,
		       user_email,
		       user_info,
		       head_img,
		       create_time
		from sys_user
	</select>

	<!--
	    SysRole中冗余SysUser，再使用“u.user_name as "user.userName"”这种形式，即可将用户信息映射到角色中。
	-->
	<select id="selectRolesByUserId" parameterType="long" resultType="SysRole">
		SELECT
			r.id,
			r.role_name roleName,
			r.enabled,
			r.create_by createdBy,
			r.create_time createTime,
		    u.user_name as "user.userName",
		    u.user_email as "user.userEmail"
		FROM
			sys_role r
				INNER JOIN sys_user_role ur ON r.id = ur.role_id
				INNER JOIN sys_user u ON u.id = ur.user_id
		WHERE
			u.id = #{userId}
	</select>

	<!--
		根据用户id和角色的enable状态获取用户的角色
	-->
	<select id="selectRolesByUserIdAndRoleEnabled"
			resultType="SysRole">
		SELECT
			r.id,
			r.role_name roleName,
			r.enabled,
			r.create_by createdBy,
			r.create_time createTime,
			u.user_name AS "user.userName",
			u.user_email AS "user.userEmail"
		FROM
			sys_role r
				INNER JOIN sys_user_role ur ON r.id = ur.role_id
				INNER JOIN sys_user u ON u.id = ur.user_id
		WHERE
			u.id = #{userId}
			AND r.enabled = #{enabled}
	</select>

	<select id="selectRolesByUserAndRole"
			resultType="SysRole">
		SELECT
			r.id,
			r.role_name roleName,
			r.enabled,
			r.create_by createdBy,
			r.create_time createTime,
			u.user_name AS "user.userName",
			u.user_email AS "user.userEmail"
		FROM
			sys_role r
				INNER JOIN sys_user_role ur ON r.id = ur.role_id
				INNER JOIN sys_user u ON u.id = ur.user_id
		WHERE
			u.id = #{user.id}
			AND r.enabled = #{role.enabled}
	</select>

	<!--
		** insert标签的属性 **

		id：命名空间的唯一标识符，可用来代表这条语句；
		parametersType：即将传入的语句参数的完全限定类名或别名；
		flushCache：默认为true，任何时间只要语句被调用，都会清空一级缓存和二级缓存；
		timeout：设置在抛出异常之前，驱动程序等待数据库返回请求结果的秒数；
		statementType：对于STATEMENT、PREPARED、CALLABLE，MyBatis会分别使用对应的Statement，PreparedStatement、CallableStatement,
					   默认PREPARED；
		useGeneratedKeys：默认false，true则Mybatis会使用JDBC的getGeneratedKeys方法来取出由数据库内部生成的主键；
		keyProperty：MyBatis通过getGeneratedKeys获取主键将要赋值的属性名，多个以逗号分割；
		keyColumn：仅对INSERT和UPDATE有用。通过生成的键值设置表中的列表；
		databaseId：如果配置了databaseIdProvider，MyBatis会加载所有的不带databaseId的或匹配当前databaseId的语句。
	-->
	<insert id="insert">
		INSERT INTO sys_user ( id, user_name, user_password, user_email, user_info, head_img, create_time )
		VALUES
		( #{id}, #{userName}, #{userPassword}, #{userEmail},
		  #{userInfo}, #{headImg, jdbcType=BLOB},
		  #{createTime, jdbcType=TIMESTAMP}
		)
	</insert>

	<!--
		useGeneratedKeys属性设置为true后，MyBatis会使用JDBC的getGeneratedKeys方法来取出由数据库内部生成的主键，将其赋值给keyProperty配置
	的id属性。
	-->
	<insert id="insert2" useGeneratedKeys="true" keyProperty="id">
		INSERT INTO sys_user ( id, user_name, user_password, user_email, user_info, head_img, create_time )
		VALUES
		( #{id}, #{userName}, #{userPassword}, #{userEmail},
		  #{userInfo}, #{headImg, jdbcType=BLOB},
		  #{createTime, jdbcType=TIMESTAMP}
		)
	</insert>

	<!--
	 	order属性的设置和使用的数据库有关，在MySQL数据库中，order属性设置的值是AFTER，因为当前记录的主键值在insert语句
	 执行成功以后才能获取到。而在Oracle数据库中，order的值要设置为BEFORE，因为Oracle中需要先从序列中获取值，然后再将值
	 作为主键插入到数据库中。
	 	LAST_INSERT_ID()用于获取数据库中最后插入的数据的ID值，Oracle中使用
	 		SELECT SEQ_ID.nextVal from dual
	 获取序列值作为ID。
	 -->
	<insert id="insert3">
		INSERT INTO sys_user ( id, user_name, user_password, user_email, user_info, head_img, create_time )
		VALUES
		( #{id}, #{userName}, #{userPassword}, #{userEmail},
		  #{userInfo}, #{headImg, jdbcType=BLOB},
		  #{createTime, jdbcType=TIMESTAMP}
		)
		<selectKey keyColumn="id" resultType="long" keyProperty="id" order="AFTER">
			SELECT LAST_INSERT_ID()
		</selectKey>
	</insert>

	<!-- 可以通过修改UPDATE语句中的WHERE条件来更新一条或一批数据 -->
	<update id="updateById">
		UPDATE sys_user
		SET user_name = #{userName},
			user_password = #{userPassword},
			user_email = #{userEmail},
			user_info = #{userInfo},
			head_img = #{headImg},
			create_time = #{createTime}
		WHERE
			id = #{id}
	</update>

	<!-- 通过主键删除 -->
	<delete id="deleteById">
		delete from sys_user where id = #{id}
	</delete>

</mapper>